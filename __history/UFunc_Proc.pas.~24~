unit UFunc_Proc;



interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Data.DB, Vcl.StdCtrls, Vcl.DBCtrls,
  Vcl.Grids, Vcl.Samples.Calendar, Vcl.ComCtrls, Vcl.DBLookup, Vcl.Mask;

 type
  TRealPoint = record
    x, y : integer;
  end;
  TRealPointArray = array of TRealPoint;
  TPositionData = record
    MeanX, MeanY, M, B, Sx, Sy, r : extended;
  end;


function  PointsAllocator(a : real; b : integer) : integer;
function  StyleToInteger(text : string) : integer;
function  Exponentiate(base, exponent : real) : real;
function  LinearRegression(Data : TRealPointArray; var M,B, R : extended) : TPositionData;
function  Logartithm(base, number : real) : real;
function  Positon(Data : TPositionData) : integer;
function  PointArrayCreator() : TRealPointArray;

implementation

uses UMain;

function PointsAllocator(a : real; b : integer) : integer;
  begin
    if b = 1 then
      begin
        Result := TRUNC(a/3);
      end
    else
      if b = 2 then
        begin
          Result := TRUNC(a/4);
        end
      else
        if b = 3 then
          begin
            Result := TRUNC(a/2);
          end
        else
          Result := 0;
  end;

function StyleToInteger(text : string) : integer;
  begin
    if (text = 'Running') or (text = 'running') then
      Result := 1
    else
      if (text = 'Cycling') or (text = 'cycling') then
        Result := 2
      else
        if (text = 'Swimming') or (text = 'swimming') then
          Result := 3
        else
          Result :=-1;
  end;

function Exponentiate(base, exponent : real) : real;
  var
    logged, multiplied, ed : real;
  begin
    logged := Ln(base);
    multiplied := exponent*logged;
    ed := Exp(multiplied);
    Result := ed;
  end;

function Logartithm(base, number : real) : real;
  begin
    Result := ((Ln(number))/(Ln(base)));
  end;

function Positon(Data : TPositionData) : integer;
  begin
    if Data.B > 2 then
      Result := 1
    else
      if (Data.B > 1.5) and (Data.M > 1.5) then
        Result := 1
      else
        if (Data.B > 1) and (Data.M > 2)then
          Result := 1
        else
          Result := 0;
  end;

function PointArrayCreator() : TRealPointArray;
  var
  RecordCount, i : integer;
  begin
    RecordCount :=frmMain.ADOTableTrain.RecordCount;
    SetLength(Result, RecordCount);
    for i := 0 to RecordCount do
      with frmMain.ADOTableTrainPoints do
        begin
          Result[i].x := i;
          Result[i].y := frmMain.ADOTableTrain['Points'];
        end;
  end;

function LinearRegression(Data : TRealPointArray) : TPositionData;
  var
    SumX, SumY, SumXSquared, SumYSquared, SumXY, Sx, Sy, MeanX, MeanY, M, B, R: extended;
    n, i: Integer;
  begin
    n           := Length(data);
    SumX        := 0.0;
    SumXSquared := 0.0;
    SumXY       := 0.0;
    SumY        := 0.0;
    SumYSquared :=0.0;
    for i := 0 to n-1 do
  	  with Data[i] do
	      begin
		    SumX        := SumX + X;
		    SumY        := SumY + Y;
		    SumXSquared := SumXSquared + Exponentiate(X, 2);
		    SumYSquared := SumYSquared + Exponentiate(Y, 2);
		    SumXY       := SumXY + X*Y;
	      end;
      if (n*SumXSquared = Exponentiate(SumX, 2)) or (n*SumYSquared = Exponentiate(SumY, 2)) then
	      begin
	        ShowMessage('Error: X and Y values cannot all be the same');
          M := 0;
          B := 0;
        end
      else
        begin
          MeanX         := SumX/n;
          MeanY         := SumY/n;
          M             := ((n * SumXY)-(SumX * SumY))/((n * SumXSquared)-(Exponentiate(SumX, 2)));
          B             := (SumY-M*SumX)/n;
          Sx            := Exponentiate((SumXSquared-(Exponentiate(MeanX, 0.5))), 0.5);
          Sy            := Exponentiate((SumYSquared-(Exponentiate(MeanY, 0.5))), 0.5);
          r             := (SumXY-SumX*SumY/n)/(Sx*sy);
          Result.MeanX  := MeanX;
          Result.MeanY  := MeanY;
          Result.M      := M;
          Result.B      := B;
          Result.Sx     := Sx;
          Result.Sy     := Sy;
          Result.r      := r;
        end;
  end;

end.
